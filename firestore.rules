rules_version = '2';
service cloud.firestore {
  function isAnyAuthenticated() {
    return request.auth.uid != null;
  }

  function isAuthenticatedUser(userId) {
    return isAnyAuthenticated() && request.auth.uid == userId;
  }

  match /databases/{database}/documents {
    match /{path=**}/projectUsers/{projectId} {
      allow list: if isAnyAuthenticated()
        && resource.data.userId == request.auth.uid;
    }

    match /users/{userId} {
      allow get: if isAuthenticatedUser(userId);
      allow list: if isAnyAuthenticated();
      allow create: if isAuthenticatedUser(userId)
        && 'id' in request.resource.data
        && request.resource.data.id is string
        && 'name' in request.resource.data
        && request.resource.data.name is string
        && request.resource.data.name.size() >= 1
        && request.resource.data.name.size() <= 50
        && 'about' in request.resource.data
        && request.resource.data.about is string
        && request.resource.data.about.size() <= 170
        && 'iconUrl' in request.resource.data
        && request.resource.data.iconUrl == null
        && 'sumUserProjects' in request.resource.data
        && request.resource.data.sumUserProjects is int
        && request.resource.data.sumUserProjects == 0
        && 'updatedAt' in request.resource.data
        && request.resource.data.updatedAt is timestamp
        && request.resource.data.updatedAt == request.time
        && 'createdAt' in request.resource.data
        && request.resource.data.createdAt is timestamp
        && request.resource.data.createdAt == request.time
      allow update: if isAuthenticatedUser(userId)
        && request.resource.data.keys().hasAll(['id', 'name', 'about', 'iconUrl', 'sumUserProjects', 'updatedAt', 'createdAt'])
        && request.resource.data.keys().hasOnly(['id', 'name', 'about', 'iconUrl', 'sumUserProjects', 'updatedAt', 'createdAt'])
        && request.resource.data.id is string
        && request.resource.data.id == resource.data.id
        && request.resource.data.name is string
        && request.resource.data.name.size() >= 1
        && request.resource.data.name.size() <= 50
        && request.resource.data.about is string
        && (request.resource.data.about.size() == 0 || (request.resource.data.about.size() >= 6 && request.resource.data.about.size() <= 170))
        && (request.resource.data.iconUrl == null || request.resource.data.iconUrl is string)
        && request.resource.data.sumUserProjects is int
        && request.resource.data.sumUserProjects >= 0
        && request.resource.data.sumUserProjects <= 1
        && request.resource.data.updatedAt is timestamp
        && request.resource.data.updatedAt != resource.data.updatedAt
        && request.resource.data.createdAt is timestamp
        && request.resource.data.createdAt == resource.data.createdAt;

        match /userProjects/{userProjectId} {
          allow list: if isAuthenticatedUser(userId);
          allow create: if isAuthenticatedUser(userId)
            && 'name' in request.resource.data
            && request.resource.data.name is string
            && request.resource.data.name.size() > 0
            && request.resource.data.name.size() <= 50
          allow delete: if isAuthenticatedUser(userId);
        }

        match /settings/{settingId} {
          allow create: if isAuthenticatedUser(userId);
          allow get: if isAuthenticatedUser(userId);
          allow update: if isAuthenticatedUser(userId);
        }

        match /tokens/{tokenId} {
          allow create: if isAuthenticatedUser(userId)
            && request.resource.data.size() == 0;
          allow delete: if isAuthenticatedUser(userId);
        }
    }

    match /projects/{projectId} {
      allow get: if isAnyAuthenticated()
        && exists(/databases/$(database)/documents/projects/$(projectId)/projectUsers/$(request.auth.uid));
      allow create: if isAnyAuthenticated()
        && request.resource.data.keys().hasAll(['name', 'description', 'adminUser', 'sumUsers', 'sumTasks', 'createdAt'])
        && request.resource.data.keys().hasOnly(['name', 'description', 'adminUser', 'sumUsers', 'sumTasks', 'createdAt'])
        && request.resource.data.name is string
        && request.resource.data.name.size() >= 1
        && request.resource.data.name.size() <= 50
        && request.resource.data.description is string
        && request.resource.data.description.size() <= 140
        && request.resource.data.adminUser is string
        && request.resource.data.adminUser == request.auth.uid
        && request.resource.data.sumUsers is int
        && request.resource.data.sumUsers == 1
        && request.resource.data.sumTasks is int
        && request.resource.data.sumTasks == 0
        && request.resource.data.createdAt is timestamp
        && request.resource.data.createdAt == request.time;
      allow update: if isAnyAuthenticated()
        && request.resource.data.keys().hasAll(['name', 'description', 'adminUser', 'sumUsers', 'sumTasks', 'createdAt'])
        && request.resource.data.keys().hasOnly(['name', 'description', 'adminUser', 'sumUsers', 'sumTasks', 'createdAt'])
        && request.resource.data.name is string
        && request.resource.data.name.size() >= 1
        && request.resource.data.name.size() <= 50
        && request.resource.data.description is string
        && request.resource.data.description.size() <= 140
        && request.resource.data.adminUser is string
        && request.resource.data.adminUser == resource.data.adminUser
        && request.resource.data.sumUsers is int
        && request.resource.data.sumUsers >= 1
        && request.resource.data.sumTasks is int
        && request.resource.data.sumTasks >= 0
        && request.resource.data.createdAt is timestamp
        && request.resource.data.createdAt == resource.data.createdAt;
      allow delete: if isAnyAuthenticated()
        && resource.data.sumUsers == 1
        && exists(/databases/$(database)/documents/projects/$(projectId)/projectUsers/$(request.auth.uid));

      match /projectUsers/{projectUserId} {
        allow list: if isAnyAuthenticated()
          && exists(/databases/$(database)/documents/projects/$(projectId)/projectUsers/$(request.auth.uid));
        allow create: if isAnyAuthenticated()
          && existsAfter(/databases/$(database)/documents/projects/$(projectId))
          && request.resource.data.keys().hasAll(['userId', 'createdAt'])
          && request.resource.data.keys().hasOnly(['userId', 'createdAt'])
          && request.resource.data.userId is string
          && request.resource.data.userId == request.auth.uid
          && request.resource.data.createdAt is timestamp
          && request.resource.data.createdAt == request.time;
        allow delete: if isAnyAuthenticated()
          && (request.auth.uid == get(/databases/$(database)/documents/projects/$(projectId)).data.adminUser || request.auth.uid == resource.data.userId);
      }

      match /projectTasks/{projectTaskId} {
        allow list: if isAnyAuthenticated();
        allow create: if isAnyAuthenticated()
          && request.resource.data.keys().hasAll(['name', 'isDone', 'taskUserIds', 'sortKey', 'expiredAt', 'createdAt'])
          && request.resource.data.keys().hasOnly(['name', 'isDone', 'taskUserIds', 'sortKey', 'expiredAt', 'createdAt'])
          && request.resource.data.name is string
          && request.resource.data.name.size() >= 1
          && request.resource.data.name.size() <= 100
          && request.resource.data.isDone is bool
          && request.resource.data.isDone == false
          && request.resource.data.taskUserIds is list
          && request.resource.data.expiredAt == null
          && request.resource.data.createdAt is timestamp
          && request.resource.data.createdAt == request.time
          && request.resource.data.sortKey is int
          && request.resource.data.sortKey >= 0;
        allow update: if isAnyAuthenticated()
          && request.resource.data.keys().hasAll(['name', 'isDone', 'taskUserIds', 'sortKey', 'expiredAt', 'createdAt'])
          && request.resource.data.keys().hasOnly(['name', 'isDone', 'taskUserIds', 'sortKey', 'expiredAt', 'createdAt'])
          && request.resource.data.name is string
          && request.resource.data.name.size() >= 1
          && request.resource.data.name.size() <= 100
          && request.resource.data.isDone is bool
          && request.resource.data.taskUserIds is list
          && (request.resource.data.expiredAt == null || (request.resource.data.expiredAt is timestamp && request.resource.data.expiredAt.toMillis() > resource.data.createdAt.toMillis()))
          && request.resource.data.createdAt is timestamp
          && request.resource.data.createdAt == resource.data.createdAt
          && request.resource.data.sortKey is int
          && request.resource.data.sortKey >= 0;
        allow delete: if isAnyAuthenticated();
      }
    }
  }
}
