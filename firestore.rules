rules_version = '2';
service cloud.firestore {
  function isAnyAuthenticated() {
    return request.auth.uid != null;
  }

  function isAuthenticatedUser(userId) {
    return isAnyAuthenticated() && request.auth.uid == userId;
  }

  match /databases/{database}/documents {
    match /{path=**}/projectUsers/{projectId} {
      allow list: if isAnyAuthenticated()
        && resource.data.userId == request.auth.uid;
    }

    match /users/{userId} {
      allow create: if isAuthenticatedUser(userId);
    }

    match /projects/{projectId} {
      allow get: if isAnyAuthenticated()
        && exists(/databases/$(database)/documents/projects/$(projectId)/projectUsers/$(request.auth.uid));
      allow create: if isAnyAuthenticated()
        && request.resource.data.keys().hasAll(['name', 'description', 'adminUser', 'sumUsers', 'createdAt'])
        && request.resource.data.keys().hasOnly(['name', 'description', 'adminUser', 'sumUsers', 'createdAt'])
        && request.resource.data.name is string
        && request.resource.data.name.size() >= 1
        && request.resource.data.name.size() <= 50
        && request.resource.data.description is string
        && request.resource.data.description.size() <= 140
        && request.resource.data.adminUser is string
        && request.resource.data.adminUser == request.auth.uid
        && request.resource.data.sumUsers is int
        && request.resource.data.sumUsers == 1
        && request.resource.data.createdAt is timestamp
        && request.resource.data.createdAt == request.time;
      allow update: if isAnyAuthenticated()
        && request.resource.data.keys().hasAll(['name', 'description', 'adminUser', 'sumUsers', 'createdAt'])
        && request.resource.data.keys().hasOnly(['name', 'description', 'adminUser', 'sumUsers', 'createdAt'])
        && request.resource.data.name is string
        && request.resource.data.name.size() >= 1
        && request.resource.data.name.size() <= 50
        && request.resource.data.description is string
        && request.resource.data.description.size() <= 140
        && request.resource.data.adminUser is string
        && request.resource.data.adminUser == resource.data.adminUser
        && request.resource.data.sumUsers is int
        && request.resource.data.sumUsers >= 1
        && request.resource.data.createdAt is timestamp
        && request.resource.data.createdAt == resource.data.createdAt;

      match /projectUsers/{projectUserId} {
        allow create: if isAnyAuthenticated()
          && existsAfter(/databases/$(database)/documents/projects/$(projectId))
          && request.resource.data.keys().hasAll(['userId', 'createdAt'])
          && request.resource.data.keys().hasOnly(['userId', 'createdAt'])
          && request.resource.data.userId is string
          && request.resource.data.userId == request.auth.uid
          && request.resource.data.createdAt is timestamp
          && request.resource.data.createdAt == request.time;
      }

      match /projectTasks/{projectTaskId} {
        allow list: if isAnyAuthenticated();
        allow create: if isAnyAuthenticated()
          && request.resource.data.keys().hasAll(['name', 'description', 'isDone', 'sumUsers', 'expiredAt', 'createdAt'])
          && request.resource.data.keys().hasOnly(['name', 'description', 'isDone', 'sumUsers', 'expiredAt', 'createdAt'])
          && request.resource.data.name is string
          && request.resource.data.name.size() >= 1
          && request.resource.data.name.size() <= 100
          && request.resource.data.description is string
          && request.resource.data.description.size() <= 140
          && request.resource.data.isDone is bool
          && request.resource.data.isDone == false
          && request.resource.data.sumUsers is int
          && request.resource.data.sumUsers == 0
          && request.resource.data.expiredAt == null
          && request.resource.data.createdAt is timestamp
          && request.resource.data.createdAt == request.time;
        allow update: if isAnyAuthenticated()
          && request.resource.data.keys().hasAll(['name', 'description', 'isDone', 'sumUsers', 'expiredAt', 'createdAt'])
          && request.resource.data.keys().hasOnly(['name', 'description', 'isDone', 'sumUsers', 'expiredAt', 'createdAt'])
          && request.resource.data.name is string
          && request.resource.data.name.size() >= 1
          && request.resource.data.name.size() <= 100
          && request.resource.data.description is string
          && request.resource.data.description.size() <= 140
          && request.resource.data.isDone is bool
          && request.resource.data.sumUsers is int
          && request.resource.data.sumUsers >= 0
          && (request.resource.data.expiredAt == null || (request.resource.data.expiredAt is timestamp && request.resource.data.expiredAt.toMillis() > resource.data.createdAt.toMillis()))
          && request.resource.data.createdAt is timestamp
          && request.resource.data.createdAt == resource.data.createdAt;
      }
    }
  }
}
